# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    app.public_host: '%env(PUBLIC_HOST)%'
    app.private_host: '%env(PRIVATE_HOST)%'
    app.email_domain: '%env(INTERNAL_EMAIL_DOMAIN)%'
    app.public.public_key: '%kernel.project_dir%/keys/publicApi/public.key'
    app.public.private_key: '%kernel.project_dir%/keys/publicApi/private.key'
    app.private.public_key: '%kernel.project_dir%/keys/privateApi/public.key'
    app.private.private_key: '%kernel.project_dir%/keys/privateApi/private.key'
    app.public_enabled: '%env(PUBLIC_ENABLED)%'
    app.graylog_host: '%env(GRAYLOG_HOST)%'
    app.graylog_port: '%env(GRAYLOG_GELF_PORT)%'
    app.redis.default_ttl: 604800
    monolog.handler.gelf.debug_level: '%graylog_debug_level%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
        # fetching services directly from the container via $container->get() won't work.
        # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    app.public.customer_provider:
        class: App\Security\CustomerProvider
        arguments:
        - '@App\Repository\CustomerRepository'

    app.private.employee_provider:
        class: App\Security\EmployeeProvider
        arguments:
        - '@App\Repository\EmployeeRepository'

    App\EventSubscriber\:
        resource: '../src/EventSubscriber/*'

    App\EventSubscriber\DoctrineEventSubscriber:
        tags:
        - {name: doctrine.event_subscriber, connection: default}

    app.migration.event_subscriber:
        class: App\EventSubscriber\Migration\MigrationEventSubscriber
        tags:
        - {name: doctrine.event_subscriber}

    app.entity.customer_listener:
        class: App\EventListener\EntityListener\CustomerListener
        tags:
        - {name: doctrine.orm.entity_listener, entity: App\Entity\Customer}

    app.cache.customer_token_blacklist:
        class: Symfony\Component\Cache\Simple\RedisCache
        public: true
        factory:
        - '@App\Factory\RedisCacheFactory'
        - 'makeRedisCache'
        arguments:
        - '@snc_redis.customer_token_blacklist'
        - '%app.redis.default_ttl%'

    app.cache.employee_token_blacklist:
        class: Symfony\Component\Cache\Simple\RedisCache
        public: true
        factory:
        - '@App\Factory\RedisCacheFactory'
        - 'makeRedisCache'
        arguments:
        - '@snc_redis.employee_token_blacklist'
        - '%app.redis.default_ttl%'

    app.security_service:
        class: App\Service\SecurityService
        public: true

    App\Service\RegistrationService:
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@App\Service\SecurityService'
            - '@App\Service\ServerService'
            - '%app.email_domain%'

    gelf.validator:
        class: Gelf\MessageValidator

    gelf.transport:
        class: Gelf\Transport\UdpTransport
        arguments:
        - '%app.graylog_host%'
        - '%app.graylog_port%'

    gelf.publisher:
        class: Gelf\Publisher
        arguments:
        - '@gelf.transport'
        - '@gelf.validator'

    monolog.gelf_formatter:
        class: Monolog\Formatter\GelfMessageFormatter
        arguments:
        - 'webapp-%app.system_hostname%'

    monolog.gelf_handler:
        class: Monolog\Handler\GelfHandler
        arguments:
        - '@gelf.publisher'
        - '%monolog.handler.gelf.debug_level%'
        calls:
        - ['setFormatter', ['@monolog.gelf_formatter']]
