syntax = 'proto3';

package valkeru.api.publicApi.site;
option php_namespace = "Valkeru\\PublicApi\\Site";
import "google/api/annotations.proto";
import "valkeru/api/publicApi/structures.proto";

service SiteService {
    rpc siteList (SiteListRequest) returns (SiteListResponse) {
        option (google.api.http) = {
            get: "/v1/site"
        };
    }

    rpc siteInfo (SiteInfoRequest) returns (SiteInfoResponse) {
        option (google.api.http) = {
            get: "/v1/site/{id}"
        };
    }

    rpc addSite (AddSiteRequest) returns (AddSiteResponse) {
        option (google.api.http) = {
            put: "/v1/site"
            body: "*"
        };
    }

    rpc deleteSite (DeleteSiteRequest) returns (DeleteSiteResponse) {
        option (google.api.http) = {
            delete: "/v1/site/{id}"
        };
    }

    rpc attachDomain (AttachDomainRequest) returns (AttachDomainResponse) {
        option (google.api.http) = {
            post: "/v1/site/{id}/attach-domain"
            body: "*"
        };
    }

    rpc detachDomain (DetachDomainRequest) returns (DetachDomainResponse) {
        option (google.api.http) = {
            post: "/v1/site/{id}/detach-domain"
            body: "*"
        };
    }
}

message SiteListRequest {
}

message SiteListResponse {
    oneof result {
        Success success = 1;
        Error error = 2;
    }

    message Success {
        repeated structures.Site sites = 1;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
        }
    }
}

message SiteInfoRequest {
    uint32 id = 1;
}

message SiteInfoResponse {
    oneof result {
        Success success = 1;
        Error error = 2;
    }

    message Success {
        structures.Site site = 1;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
        }
    }
}

message AddSiteRequest {
    string path = 1;
}

message AddSiteResponse {
    oneof result {
        Success success = 1;
        Error error = 2;
    }

    message Success {
        structures.Site site = 1;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
            SITE_EXISTS = 1;
            INVALID_PATH = 2;
        }
    }
}

message DeleteSiteRequest {
    uint32 id = 1;
}

// Пустой ответ при успехе
message DeleteSiteResponse {
    Error error = 2;

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
        }
    }
}

message AttachDomainRequest {
    uint32 id = 1;
    uint32 domain_id = 2;
}

message AttachDomainResponse {
    oneof result {
        Success success = 1;
        Error error = 2;
    }

    message Success {
        structures.Site site = 1;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
            DOMAIN_NOT_FOUND = 2;
        }
    }
}

message DetachDomainRequest {
    uint32 id = 1;
    uint32 domain_id = 2;
}

message DetachDomainResponse {
    oneof result {
        Success success = 1;
        Error error = 2;
    }

    message Success {
        structures.Site site = 1;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
            DOMAIN_NOT_FOUND = 2;
        }
    }
}
